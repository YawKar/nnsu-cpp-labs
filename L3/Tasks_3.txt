# Задание №3
Время на решение -- 2 недели.

## Задача №1: Табулятор функции (L)
Разработать класс Tabulator.

Класс должен позволять выполнять табулирование произвольной функции одной переменной, заданной в виде функции *f(x)* языка C++.

Табулирование функции *f(x)* на заданном интервале табулирования [*a*, *b*] и заданном количестве точек табуляции *n* состоит в сформировании динамических массивов значений *X* в равноотстоящих точках табуляции и значений функции *F* в этих точках в виде:

|  |  |  |  |  |  |
|----|------------------------------------------------------|--------------------------------------------------------|-----------------------------------------------------------|-------------------------------------------------|--------------------------------------------------------------|
| X: | ![](https://latex.codecogs.com/svg.latex?x_0=a) | ![](https://latex.codecogs.com/svg.latex?x_1=a&plus;h) | ![]( https://latex.codecogs.com/svg.latex?x_2=a&plus;2h ) | ![](https://latex.codecogs.com/svg.latex?\dots) | ![](https://latex.codecogs.com/svg.latex?x_{n-1}=b) |
| F: | ![](https://latex.codecogs.com/svg.latex?f_0=f(x_0)) | ![](https://latex.codecogs.com/svg.latex?f_1=f(x_1)) | ![](https://latex.codecogs.com/svg.latex?f_2=f(x_2)) | ![](https://latex.codecogs.com/svg.latex?\dots) | ![](https://latex.codecogs.com/svg.latex?f_{n-1}=f(x_{n-1})) |

Где шаг *h=(b-a)/(n-1)*
Вычисление табулированной функции в точке ![](https://latex.codecogs.com/svg.latex?\inline&space;x\in[a,b]) выполняется с помощью линейной интерполяции  по двум точкам плоскости: ![](https://latex.codecogs.com/svg.latex?\inline&space;(x_i,f_i)) и ![](https://latex.codecogs.com/svg.latex?\inline&space;(x_{i+1},f_{i+1})), где: ![](https://latex.codecogs.com/svg.latex?\inline&space;x\in[x_i,x_{i+1}]).

Класс должен содержать необходимые конструкторы и деструктор.

Класс должен предоставлять следующие операции (методы класса):
* задать интервал табулирования *a, b*
* задать число точек табулирования *n*
* узнать интервал табулирования
* узнать число точек табулирования
* выполнить табулирование функции
* вычислить значение табулированной функции в заданной точке *x* и сравнить это значение со значением исходной функции в этой точке


## Задача №2: Расчет интегралов (L)
Разработать класс Integrals.
Класс должен позволять вычислять приближенное значение интеграла от произвольной функции одной переменной, заданной в виде функции языка C++. 

Класс должен для заданного интервала интегрирования [*a*, *b*] и количества отрезков разбиения интервала *n* вычислять приближенное значение интеграла, используя методы [левых, правых и средних прямоугольников](https://ru.wikipedia.org/wiki/%D0%9C%D0%B5%D1%82%D0%BE%D0%B4_%D0%BF%D1%80%D1%8F%D0%BC%D0%BE%D1%83%D0%B3%D0%BE%D0%BB%D1%8C%D0%BD%D0%B8%D0%BA%D0%BE%D0%B2).

Класс должен содержать необходимые конструкторы и деструктор.

Класс должен предоставлять следующие операции (методы класса): 
* конструктор инициализатор с параметрами: интервал интегрирования, число отрезков разбиения интервала интегрирования
* задать интегрируемую функцию
* вычислить значение интеграла указанным методом
* вывести результат вычисления на экран

## Задача №3: Ряд Тейлора (M)
Разработать класс Taylor.

Ряд Тейлора – приближенное представление значения функции *f(x)* в окрестности точки a в виде суммы в виде конечной суммы членов [ряда Тейлора](https://ru.wikipedia.org/wiki/%D0%A0%D1%8F%D0%B4_%D0%A2%D0%B5%D0%B9%D0%BB%D0%BE%D1%80%D0%B0): 

![](https://latex.codecogs.com/svg.latex?f(x)=f(a)&plus;\frac{{f}'(a)}{1!}(x-a)&plus;\frac{{f}''(a)}{2!}(x-a)^2&plus;\dots&plus;\frac{f^{(n)}(a)}{n!}(x-a)^n&plus;\dots)

Класс должен формировать динамический массив значений коэффициентов ряда (типа double) Тейлора: ![](https://latex.codecogs.com/svg.latex?\inline&space;f(a),\frac{f'(a)}{1!},\frac{f''(a)}{2!},\dots) для заданного числа членов ряда.

В качестве функции на усмотрение студента может быть выбрана одна из: *sin(x), cos(x), exp(x)*.

Класс должен содержать необходимые конструкторы и деструктор.

Класс должен предоставлять следующие операции (методы класса):
* задать число членов ряда
* узнать текущее число членов ряда
* задать значение параметра *a* и подсчитать значения массива коэффициентов
* выдать формулу ряда с коэффициентами, подсчитанными для заданного параметра *a*
* выдать значение заданного члена ряда,
* рассчитать значение ряда в выбранной точке *x*, 
* вывести отклонение значения ряда в выбранной точке от эталонного значения функции в данной точке (эталонное значение вычисляется, используя соответствующую функцию из стандартной библиотеки C++).
* перегрузить операцию записи–чтения из потока (файлового)

## Задача №4: Пользовательское меню (H)
Разработать класс Menu.

Класс должен предоставлять одноуровневое (однострочное) меню с заданным числом команд в консольном режиме экрана. 

Класс должен содержать необходимые конструкторы, деструктор и методы (по выбору студента).

В качестве обязательных, класс должен содержать методы:
* Конструктор инициализатор с параметрами:
    * Местоположение меню: координаты начала строки меню и длину меню.  
    * Количество пунктов меню
    * Массив названий пунктов меню
* Конструктор с параметром – имя текстового файла описания меню. Текст описания меню должен содержать:
    * Местоположение меню в виде: xCor yCor size
    * Количество пунктов меню
    * Названия пунктов (по одному в строке)
    
    Пример:
    ```
        1 1 80
        3
        File
        Main
        View  
    ```
        
    В этом примере указано, что меню:
    * начинается в позиции экрана с координатами  (1, 1) и имеет длину 80 символов;
    * включает 3 пункта;
    * которые имеют имена: File, Main и View.
* Вывести (показать) меню на экран
* Удалить меню с экрана
* Выбрать пункт меню с помощью клавиш: стрелки (влево, вправо) и ввод (Enter) с выдачей номера выбранного пункта меню. 

[Работа с консолью](http://www.c-cpp.ru/funkcii/conioh). 

## Задача №5: Однострочный текстовый редактор (H)
Разработать класс TextEditor.

Класс должен предоставлять возможность разместить в выбранной позиции окна консоли поле заданной длины для ввода с клавиатуры последовательности символов.

В минимальном варианте длина последовательности не должна превышать длину поля ввода.

Класс должен содержать необходимые служебные методы (конструкторы, деструктор и пр.).

Класс должен предоставлять следующие операции: 
* конструктор инициализатор с параметрами: начальная позиция поля ввода (x, y) в окне консоли. длина поля ввода
* показать текстовый редактор, убрать с экрана текстовый редактор
* обеспечить ввод пользователем строки с длиной не больше длины поля ввода
* выдать введенную пользователем строку

Программа должна иметь простейшее меню:
* Введите положение и размер окна
* Показать редактор
* Убрать редактор
* Введите и отредактируйте текст
* Завершить работу

[Работа с консолью](http://www.c-cpp.ru/funkcii/conioh). 

## Задача №6: Словарь переводчика (H)
Разработать класс Dictionary.

Класс должен предоставлять возможность формировать англо-русский словарь.

В минимальном варианте каждому английскому слову соответствует ровно одно русское слово-перевод.

Класс должен содержать необходимые служебные методы (конструкторы, деструктор и пр.).

Класс должен предоставлять следующие операции: 
* добавить в словарь слово и его перевод
* изменить перевод указанного слова, 
* узнать перевод выбранного слова, 
* проверить наличие слова в словаре, 
* узнать число слов в словаре, 
* сохранить словарь в файл,  считать словарь из файла.
* перегрузить операции присваивания и объединения словарей.

